//! Merkle trie proofs.

use crate::{Nibbles, TrieAccount};
use alloy_primitives::{keccak256, Address, Bytes, B256, U256};
use alloy_rlp::{encode_fixed_size, Decodable};
use alloy_trie::{
    nodes::TrieNode,
    proof::{verify_proof, ProofVerificationError},
    EMPTY_ROOT_HASH,
};
use reth_primitives_traits::{constants::KECCAK_EMPTY, Account};
use serde::{Deserialize, Serialize};
use std::collections::{BTreeMap, HashMap};

/// The state multiproof of target accounts and multiproofs of their storage tries.
/// Multiproof is effectively a state subtrie that only contains the nodes
/// in the paths of target accounts.
#[derive(Clone, Default, Debug)]
pub struct MultiProof {
    /// State trie multiproof for requested accounts.
    pub account_subtree: BTreeMap<Nibbles, Bytes>,
    /// Storage trie multiproofs.
    pub storages: HashMap<B256, StorageMultiProof>,
}

impl MultiProof {
    /// Construct the account proof from the multiproof.
    pub fn account_proof(
        &self,
        address: Address,
        slots: &[B256],
    ) -> Result<AccountProof, alloy_rlp::Error> {
        let hashed_address = keccak256(address);
        let nibbles = Nibbles::unpack(hashed_address);

        // Retrieve the account proof.
        let proof = self
            .account_subtree
            .iter()
            .filter(|(path, _)| nibbles.starts_with(path))
            .map(|(_, node)| node.clone())
            .collect::<Vec<_>>();

        // Inspect the last node in the proof. If it's a leaf node with matching suffix,
        // then the node contains the encoded trie account.
        let info = 'info: {
            if let Some(last) = proof.last() {
                if let TrieNode::Leaf(leaf) = TrieNode::decode(&mut &last[..])? {
                    if nibbles.ends_with(&leaf.key) {
                        let account = TrieAccount::decode(&mut &leaf.value[..])?;
                        break 'info Some(Account {
                            balance: account.balance,
                            nonce: account.nonce,
                            bytecode_hash: (account.code_hash != KECCAK_EMPTY)
                                .then_some(account.code_hash),
                        })
                    }
                }
            }
            None
        };

        // Retrieve proofs for requested storage slots.
        let storage_multiproof = self.storages.get(&hashed_address);
        let storage_root = storage_multiproof.map(|m| m.root).unwrap_or(EMPTY_ROOT_HASH);
        let mut storage_proofs = Vec::with_capacity(slots.len());
        for slot in slots {
            let proof = if let Some(multiproof) = &storage_multiproof {
                multiproof.storage_proof(*slot)?
            } else {
                StorageProof::new(*slot)
            };
            storage_proofs.push(proof);
        }
        Ok(AccountProof { address, info, proof, storage_root, storage_proofs })
    }
}

/// The merkle multiproof of storage trie.
#[derive(Clone, Debug)]
pub struct StorageMultiProof {
    /// Storage trie root.
    pub root: B256,
    /// Storage multiproof for requested slots.
    pub subtree: BTreeMap<Nibbles, Bytes>,
}

impl Default for StorageMultiProof {
    fn default() -> Self {
        Self { root: EMPTY_ROOT_HASH, subtree: BTreeMap::default() }
    }
}

impl StorageMultiProof {
    /// Return storage proofs for the target storage slot (unhashed).
    pub fn storage_proof(&self, slot: B256) -> Result<StorageProof, alloy_rlp::Error> {
        let nibbles = Nibbles::unpack(keccak256(slot));

        // Retrieve the storage proof.
        let proof = self
            .subtree
            .iter()
            .filter(|(path, _)| nibbles.starts_with(path))
            .map(|(_, node)| node.clone())
            .collect::<Vec<_>>();

        // Inspect the last node in the proof. If it's a leaf node with matching suffix,
        // then the node contains the encoded slot value.
        let value = 'value: {
            if let Some(last) = proof.last() {
                if let TrieNode::Leaf(leaf) = TrieNode::decode(&mut &last[..])? {
                    if nibbles.ends_with(&leaf.key) {
                        break 'value U256::decode(&mut &leaf.value[..])?
                    }
                }
            }
            U256::ZERO
        };

        Ok(StorageProof { key: slot, nibbles, value, proof })
    }
}

/// The merkle proof with the relevant account info.
#[derive(Clone, PartialEq, Eq, Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct AccountProof {
    /// The address associated with the account.
    pub address: Address,
    /// Account info.
    pub info: Option<Account>,
    /// Array of rlp-serialized merkle trie nodes which starting from the root node and
    /// following the path of the hashed address as key.
    pub proof: Vec<Bytes>,
    /// The storage trie root.
    pub storage_root: B256,
    /// Array of storage proofs as requested.
    pub storage_proofs: Vec<StorageProof>,
}

impl Default for AccountProof {
    fn default() -> Self {
        Self::new(Address::default())
    }
}

impl AccountProof {
    /// Create new account proof entity.
    pub const fn new(address: Address) -> Self {
        Self {
            address,
            info: None,
            proof: Vec::new(),
            storage_root: EMPTY_ROOT_HASH,
            storage_proofs: Vec::new(),
        }
    }

    /// Verify the storage proofs and account proof against the provided state root.
    pub fn verify(&self, root: B256) -> Result<(), ProofVerificationError> {
        // Verify storage proofs.
        for storage_proof in &self.storage_proofs {
            storage_proof.verify(self.storage_root)?;
        }

        // Verify the account proof.
        let expected = if self.info.is_none() && self.storage_root == EMPTY_ROOT_HASH {
            None
        } else {
            Some(alloy_rlp::encode(TrieAccount::from((
                self.info.unwrap_or_default(),
                self.storage_root,
            ))))
        };
        let nibbles = Nibbles::unpack(keccak256(self.address));
        verify_proof(root, nibbles, expected, &self.proof)
    }
}

/// The merkle proof of the storage entry.
#[derive(Clone, PartialEq, Eq, Default, Debug, Serialize, Deserialize)]
pub struct StorageProof {
    /// The raw storage key.
    pub key: B256,
    /// The hashed storage key nibbles.
    pub nibbles: Nibbles,
    /// The storage value.
    pub value: U256,
    /// Array of rlp-serialized merkle trie nodes which starting from the storage root node and
    /// following the path of the hashed storage slot as key.
    pub proof: Vec<Bytes>,
}

impl StorageProof {
    /// Create new storage proof from the storage slot.
    pub fn new(key: B256) -> Self {
        let nibbles = Nibbles::unpack(keccak256(key));
        Self { key, nibbles, ..Default::default() }
    }

    /// Create new storage proof from the storage slot and its pre-hashed image.
    pub fn new_with_hashed(key: B256, hashed_key: B256) -> Self {
        Self { key, nibbles: Nibbles::unpack(hashed_key), ..Default::default() }
    }

    /// Create new storage proof from the storage slot and its pre-hashed image.
    pub fn new_with_nibbles(key: B256, nibbles: Nibbles) -> Self {
        Self { key, nibbles, ..Default::default() }
    }

    /// Verify the proof against the provided storage root.
    pub fn verify(&self, root: B256) -> Result<(), ProofVerificationError> {
        let expected =
            if self.value.is_zero() { None } else { Some(encode_fixed_size(&self.value).to_vec()) };
        verify_proof(root, self.nibbles.clone(), expected, &self.proof)
    }
}

/// Implementation of hasher using our keccak256 hashing function
/// for compatibility with `triehash` crate.
#[cfg(any(test, feature = "test-utils"))]
pub mod triehash {
    use alloy_primitives::{keccak256, B256};
    use hash_db::Hasher;
    use plain_hasher::PlainHasher;

    /// A [Hasher] that calculates a keccak256 hash of the given data.
    #[derive(Default, Debug, Clone, PartialEq, Eq)]
    #[non_exhaustive]
    pub struct KeccakHasher;

    #[cfg(any(test, feature = "test-utils"))]
    impl Hasher for KeccakHasher {
        type Out = B256;
        type StdHasher = PlainHasher;

        const LENGTH: usize = 32;

        fn hash(x: &[u8]) -> Self::Out {
            keccak256(x)
        }
    }
}

/// This prints out a human readable multiproof for the given root.
///
/// TODO: make something like this reusable for account, then storage multiproofs.
/// First start with account trie.
#[allow(dead_code)]
fn human_readable_witness(
    state_root: B256,
    witness_map: HashMap<B256, Bytes>,
    include_siblings: bool,
) {
    let mut stack = vec![(0, state_root)];
    while let Some((curr_level, curr)) = stack.pop() {
        let prefix: String = (0..curr_level).map(|_| "+").collect();
        println!("{prefix}{curr}");
        let Some(encoded_node) = witness_map.get(&curr) else {
            // child is not in the proof
            continue
        };

        let trie_node = TrieNode::decode(&mut encoded_node.as_ref()).unwrap();
        // println!("{trie_node:?}");
        match trie_node {
            TrieNode::Leaf(leaf) => {
                // TODO: decide how to present storage proofs
                println!("{prefix}|leaf node: {leaf:?}");
            }
            TrieNode::Branch(branch_node) => {
                // add nodes
                let hashes: Vec<_> = branch_node
                    .stack
                    .iter()
                    .map(|elem| {
                        (
                            curr_level + 1,
                            B256::decode(&mut elem.as_ref())
                                .expect("nodes should be properly rlp encoded"),
                        )
                    })
                    .filter(|elem| include_siblings || witness_map.contains_key(&elem.1))
                    .collect();
                stack.extend(hashes);
            }
            TrieNode::Extension(extension) => {
                println!("{prefix}|extension node: {extension:#?}");
                todo!("impl this")
            }
        }
    }
}

#[cfg(test)]
mod tests {
    use revm_primitives::b256;

    use super::*;

    #[test]
    fn human_readable_works() {
        // from block https://holesky.etherscan.io/block/2353851
        // parent block state root:
        // 0x233616dac5e708318380f37d962cbea36da209593a75726966bdc530a0cb0512
        let real_witness = r#"
{
    "0xf2d52c2a53b33c1b1d96cd073908a627d7d8291e75d6d8836de77552014abfd7": "0xf891a0976cdf67c0eebe123a587af08aab6b7c2553db2d7bf2064b97ad3d29629d862480a06c79f153b1fe813fcac2c312932b306551cf65058e7e1e87519c091275136dfca09d35e08d52526cdaa7a1d3d2cbfbd9f380c02c7a2137f8246685044eb8a048b680808080a0871563855c728f9955647a3ed9994434160f9531b2de779e61a3b4b74a7ac12b8080808080808080",
    "0x7a9f35c51203bb5e47c3d9b817de39ba93bd4490a633781be1bb2a109b0149e0": "0xf90211a066f80baa2fd9e4ca9ef31e381a2bf13d27e8bb547e4214499a80f684dd364b03a0768e6b57a2f776c8bf30820971e45afebc2b572ec679d9d4093e3b8ec8776dfea083fda646035cd548294777d4a5719691c6ad9078033d2031f80a29d790d089f1a01d053a8d6ee2bf29fe1679f95f444b141e8e403157b313d230db15aa23ff8f4fa0ce7519be426350aa0a7e9c8158bbcf3300ffe8c7053e37a8c44c00851fb67d53a0958e471e0861f8c94b4a2ee070e4047ee20411187f91f9157d30beb32f9848bfa09973c0ec8f111692f4aac8c7c0a13775c82d17ac4af9cad53a11b4d4b46e3140a0cb0e9ca93293e250bf20d66787eed0f9ceb526b969c4bbed791f5974b1b703a0a03f44b69f76a67a98152dd72eac139404fc55f2dd3fd41fdd523deac39efe17bda0019e6fcbd478de5a6f0bb5d49459fae8394b4445b4585c75375be2bcb7be7156a0fa219494f3ef15171c2a11015c9b31b473a234146c07952275fbe556ad735fc9a00b8e4bc48b9977720afdc655d68b8606029925b4ce0b51256d29358edb0ece91a0f0a3316fd5c42813f994dc4b4bdf39e08834e04b91b2ee45e648897d75b55e16a0f13abdabb6f55e3022d6d7d59e8aea288d404e4a7e84bc3ceca9a505a50cffb3a0086d1a1bd104692b8e0fe52a73b6093156264204a29abba17a0e8cdceedb31e5a0fab5ee962707d6d7408087238791f4254e1c044ee9b24187ffb64069c7e7d9dd80",
    "0x4b3da85214fdba40e4e3c3a655188722b05b40685266bef10957e42a3d9904dc": "0xf8419e3fc0d907e6e725407a9b5d2f0d64066f4404130519c1ea91b11306c34855a1a0bf7bc462ef49e6f3a11bd15c36de3e807e2641cc90c8e43d7203d4ee07127f37",
    "0x8cb8b27973626d3b52d07745a460a0524f61ffbaacfbfbffe990e2b52d48af52": "0xf90211a0531117d8f154071a4c825c2fbead6b2f3cfda29d45cd4a5cf22531bfb6a5268aa0ff5a8bdf4297d1a933c418a0192bff85c818a31743400dcae84feaf1211cf666a094d6fd2ee9cfa63fedd3553c814870e89440b6073bc9cac56788d1906fa1fb38a0a773aec08b1b50c12a75099c61b7636a62bae858ae73398445addfbf033e81b8a0761996eeaec89c4c17eb7838b28faff84323ec6e67fed582e8dbf77f9f3faca4a08946bd4f7c84e4149237411f8418f8d7cbf82a48cd5750a558402d3fb94d277aa0ac5db4ab1e839208dca4c62db469af083f553c1fad14f161cc5363ec93a6ab30a01d0e5e70c9cc75b44caf7f5d811270d9ae45d38f933e18bc029704fe0392f422a00708e2d904851b35e61b22dfb1fe1d088ba892a7d59a184e183b2bcf6ac287b9a0bfb7952692fccd16fe2f339f471443c639ea3e40d6b94989b3f963f09f081ceaa061de6db065a71faefd25a4aabe3278549644c3343dbbcff65412a79c1757523ea00aace6d31cf8cecf3e3b19423bfdee6f480766a8a761ea3476ecf2395688c91aa0f171493b9dba6bb2f4b8d3eb94e26f8f80e3d162d0777d7688bbdd28537d39c7a0a0bb0b4ef98713735af90a5ce29beadf83f915d6d8433efdcddfd93445229070a0b9b780fed7e9846a9ea6f396a02b48239852f32b90ea470bd5329db979b4dc76a0245e6555e6bce47b795ce9063e91b1e11e131a126d30b6c4a9bcc0d35733384f80",
    "0x3bc6daa3e731d5505b4435db5ac56c40894082abd263129ff1637a366201e7b3": "0xf90211a068927fee3ae9d7963585b9b84f3a93365d0e6d39e9a087b76de6abb758a89c0aa002a1a522b7dc53071974cf6dea74a1e5b53855ae2cd7b412c66dfaafbe3f01c8a05ebbf5846de157f40462f73cc50aec66a3bd94b36811da8f0ba6f9840690b6a3a02969713f8a47c4745b3374b1a2ead50126c143c9a7817294ec4636935c613671a02594f56cfca3c872c8ad3240b59ebe8e957a87a6f468a65baae102396d6d2a54a022fd6cfeb106b87b7c393400f482fb8f10a029f7a8e2f7bb226623f0442dff4da09a48017b902234266a0a455a73231441adfa4858c5ec65bf542abe5f7bed0b6aa092b5dd12758ff93c933d9f09a406c8a8944b9669498c89425b2dc4e18b9483d3a033f5ed1ea10a4bfc6611e5d388313e31e88bdc98d5a698440f7b92655d4adaaea0a636e351b4978293827d22bf3133fd44e68f1d39703d9198655f8cdba9e88d44a03ef178dd9cc2f6217254bc97097715ed0dc33c62eec9ee81241574484dd0cfc9a0e1671e25e178708aa9f88359a16b578594da607d3423b622fb26ec9ba6fe9ac9a079a64f4c06215ce35cf61906ac3bcf82eebfab3fb6181c5d06eaf0a1b04d41a8a0605fd0d2c0f29d22a70cf627ade7ca3ba53038e700d36fa9589b6f662a7f8fb2a0386cf5adc1d3bc904582d8cbdca74210ec423f7d68f010d96b8a10b39db77ddea05521523a3c86c0ed551480abf0b2cc0fb4770c1ec2b6311e3c7470a77e4b127280",
    "0x3bf7be37dec0e9198b9bc7a42380430ad737efb4f990f045acd97c6beebf382c": "0xf90211a076fe02b15341a9d234539c8228570c7fc5b5f4ee1af5969c68a10124a63ee477a078592c3ac9ddc15daa8f4f83ea444124311e6ca6ad7be254525fdc9ff33c5258a0458a12b296a25091a1bc3d3bad4771dd6864cf048cd6a03ad48b0e41f378c145a04583a8a38305aab1714d92e2bec311e41cb7665cdaefd919652ab92feb342462a07cffa6624a8928b092ceeb457398ddd0db0cb55a1da8f2f75763f8c3f2281774a05444ce502f7a10c454db67f5e2447c70a4da3d2ffd86af54a49a6aa09362d808a037d008b53fc8f3e818c175cca6b2675307c35f6410b29921560288723983fa6ea00a80cbc9bfb906e09c70001af01e5a7ea3d2bf1e8ab723eadd9597b72b9fabafa04ddbd999bcb6f57ea38359f5dc7effbfee08e5eb461b5320c908b6792f4e3c29a03849015b6c3a8c76b2c7470c2626aefb218816b0d1e125ef9666957b0a896169a0579c8bb70d444eee3272be33b48bcc31da312a1eb1a2f24e52ce9174a042b77ea011c362a9c82a56fafca6ae34efac5ccb3f1f3fc7cd0a831d14e72db84f0aff9fa0367a3b002ff7a91ea732f85844a869ed5df58fee1493087162c99e47b48a0fa2a0f7739b1c443cc6451ca4a10901c0ed5d7a7b75d77d9060528efaad15b9ce226ca0ae3676bfde58d8219471791270564d238e30c5f01731618b7dde74daabf228b3a0d0ac4397440db4dcd8e119834bd481cebc472c165c169f63bc143d14056206d180",
    "0x04aa7c8829c503596aa5e37848d9d0e9fcff94a339b51aa16de6e698aa8f1429": "0xf90211a0640090ee59557ebc6027e78ecf20a032dc2f7f76610ecabfc629dff812b7c3c2a04ac60665cb3507f774acdbaa7a4c25bf600adac3c5ab15509f0d4f0158cd9e60a03bc6daa3e731d5505b4435db5ac56c40894082abd263129ff1637a366201e7b3a0715b536fcd9eabf2c465a915333f92a20858ef0234255059fe6c77d026e44c71a0c9c0e5c48b87c61b610752661b1201455c1bda992e74aed44d6d300ef099ce24a01bce702831756d80cbf18ef5a2d0d858f91568f2c506e3ba2685d29cf66136a1a085c2050d9cec8b862bae8775bd0c673896a00cf938288db3bfb8b04d605e9eb4a007f4706cc13c9990ee8f646964c52c5dc30dd5c52edfe977ba608041ad3193f9a021289720a161b12c3f7847988ea152e304aacc6a438fee1c1fe61a7f447f66fda0aeaf717dc3800c16aa6d56561f955571e173d8f8fcf5df51a9787eaffa0046b7a0e8b27d7be4e4c1a23e433fdb7f3dba002b6352f2d1755a7e26613e09dabe7738a0d8e116c0515b72b7f6184c715680f2bf03a8336a9229ec86fce62ea9edafe958a08a8fbfbc2e545ed7ac13862f72cf862421aa6b21a550784c12c884dfb1024c8ba0642a4ce7248b657919d21ca3c7b38172a183a5b85ffd1db0f446f9906c04320ca078b3af0b0ee2bb23ad4801026d1eec907a4f099457a0354f648d42da504f972ca01ede45ba2eccf04fccf30f011d5c361fda2b0145098231ebc05c11f5737f54e280",
    "0xb9b780fed7e9846a9ea6f396a02b48239852f32b90ea470bd5329db979b4dc76": "0xf90211a0ddf9c92b586eaa992d8fa62bc66115ca0778a9f1611a24ee0a849f5f122719dea0ef89f7e9b00013d07a11303c22e502bca82a43e305d7a388c09909ea3c4e113ca0bd76b79a598a15af7ff16d09b76b21230bef04a2e4cca205afff161c65ab886aa0433d1a43d49180f8e48ac23f40c1c55e4b15eab261018f0bfcba322d9d09b76ba01b8e6507bb749a5e7c7b065af2dc0be059bbaacef442f5a12a29e9e5de252529a083fb7ab9457e9fb3359b0852557d8adaee9db5d755eb5cb88f681814ea9def70a000a3838fd75c07864268386731f557a38bf9aba54049619faedfac74f1f67a6aa00143bded63e2e1e4eb1148b011108578f946158bdc0fcfa7c7cd0ae37135e754a052997ba7a32385690fb3a5c378b78e511350a359dfe1078f88963ac505e5a299a08b49505f611e4a38a08e3f02bc3346fb4c847f4a3b4f64827a694cd942b4b73fa06f86b1c2b53b68a3e7f1c3514187f74d2434b53c6612fcd3004ba18d2c7a0613a0bad8be902f886e4ff4e447db7f94a9bd58765d57742908d5549a833074dae207a0ad701e659e41a02d666f0d62f1342fc2234af7e480d8c88c3273949c1cd01fdba09f1971068dcf25a3450268964e28c21ffbe8b122d6c49290862c2cfb7c08e82fa0d217b24428dec38213888dd8b7ee6a02f0f51f16b16f8072c1af31f673ea6edda058a3ed27daf2f55aa2874fd8e3a2f9d36afd52ccf56af5538978ae615520250580",
    "0x6691bb48922fd0cb4807ed2ceded86e3d2d3d5cdfd2db1fb78ef3ca809a97ac1": "0xf90211a019023eb0e90d6ac4e777f89297ae07a04b5d3de524edc594dfd9aa88f9f12e70a02cb2f291b4b95c8b4b6321512dde016a83091299393e3a6d0b6550109916fdaea0be56094c256fc88aa4b909f6a03bdf3d4a831439278bd86b36c6ca0bffda2d02a03217882f5bfe5ac1d797b9d168aef0cc68ad9e5dab5d134ba28b2995ba20796aa0bca451ca3749cb6f2876f05c637b8cfe0eba21694335c73b973649c6be134323a0397b9ff79a10c222c1e719235496536ceb7e628a91f461a8d07862f80c544485a007996666a40d6c5c85e2bf467873b5a276857d98505330f49f194e2db81ae2daa03a427bee045cb8d744c91f8a923400ab984aa45b8bc636f2fd9606ba75c532cea032bf378f08e71e2a3ca0f71b5aea7220388de2366a51db97de7dfc2038e3b583a02242f172a1dca6c3eb02fe9971786e2e0fc9181345bee76807e5dd9ce93e651aa05babbd257c85dfe7fd7b70b7979d2f727bfc8b35c5f20255636cf8df7dccb5a3a0e1e342b86cfa94107d82c21f9999b2206bf24d1d2b3d09fe1e1ca66fbd1adef6a049064707b425dedabdc96a18f4e0e9b5b827a53c063434bbf842f2a80b5bbb3fa04bdc0fce98212bbe93e0b2de04161ca54b94dedc8c6df8455ec3a340417b17c9a02851a2ecd0fc3d68d667ffffabb520441c7e4ce590face1b032197e06e76ddafa0de3a20fed8345d3cf1affbeb7ebb474a412a7f7a5ce4f0e6320d91246e433db580",
    "0xad701e659e41a02d666f0d62f1342fc2234af7e480d8c88c3273949c1cd01fdb": "0xf871a0e3812b7d1c00495192f9f8db915a3a6885702125bd2099e5b969e36956a8273ca03354be7b7de9e40e8cf7f5ad6d697d80cc657b6b5b3b4170388f17778762d4fa80a0a1a3ca96ee46e8c74287e025e393e5cebc1aed646c9ab20a13ef2ddc2062fff080808080808080808080808080",
    "0xfa124e76ab055b39b0f3eaa49e497f82a711d6fb4e573c5e509530b24ff4c70c": "0xf901d1a077d8959176f654faf6d10eba87bc636d7eaa58f41ffcd1e65ec8c725b1df5cf2a07e5edc02c0ff1fc2f07d28f6843ac962724fc381620078a08d19fb9ae6e849c1a08d45df1922a84e2bb4bb91c4874533f6aabaf8ab432aec68874cdd6ef14cca4ca0dc3eea28d592140326c6c1e30f187e56baae03d95b6fb1deb81c5f6a33d9301c80a08417b60ab1202145045c5fd1771fcb5271cfd57aeb9911fc3d283865a1d4627aa0c6263e952d9d79ca03753fe0377c82b2cb7ea3ba95021c6e59947b570a03e29ea02fe8b0f21d409b2f3a9275216e5922341868436892ebd5d35c9100eb68985b81a07c67bc36d01060684013832475ab767a9cb7547e386594289758542daa443faaa060697b8aeaaba74f6269c47bb5cb7600a0c395f4959f84a2339cfcc705b8618da0c1f926d57f28cb9792f6a345ed6e25e48395a5fa6f04196d5dc05dee7333318aa0c6dee6d1314ab22a79afe004251ad9f59855a47da890b51a0c5acda35a607f0b80a03870bca7ac0fbaa5d59197e4a6c12df1e26733d57478f6d965ab2bd4dc425d7da078960421e6d68665a7b058899aa08ecb1de3dc15f1bb7e324a11005158f0be06a0f385f5fea2964b10dff04c8dd5512a4f7254859b0d3e4cc52dd3f6eacce8a5d680",
    "0x4794801c0388d588cd9133401bab114181ce679d2c7aedfcb97a7801f9df2402": "0xf90211a074550ec8d5fb59cb00097b5292d40ac2216a4c9cc1895b9b7bac27314e242b99a0b2655b374d78ac050ff8de5de999e1083920478dd30201a52de4c6e9275ada06a074e8bf5a1148532e224495dc31ac5d7182fe533752cf779705d9a67dd3fca779a0b8b462385648a6e6e8d17ba709f01a4502ffd2c2951a6e83877273835a2d60eda01c3a3a87ef8b0ccdc664a43db7995955e3ae2d074e0354b5b0102fc49830f7d6a024b42ae5e1de456d92f81217b96526948569e157337cf1b8255550b1b24245e5a06682412841a518ff99e81f5b6521ba37d1fc252e41f9eca23023dfe4cc70f821a0ed23c521f79fadc8c8640d409796345a3b895f108fca1b7466ddad969d68103da0cdbfc0ac02e36c4cab6549283b2b5b3015f06b7bccac4a474716a68cab7da323a0420828cac7a837bc0760d9e68959998d28f32c5a1fc81efe3831d76758d1ab05a0d162bc512f54a3e9058bece4265418a6f21aa4604e0ef93cd87827a219e904f1a0aeea4a51432cb03fcc0419155f44328cad08d3258fac876a05848013249655d5a0d6b5127a4db9495e82bdb67172d565b9b00540b0dd5aa844720ccaf618ecc710a088e44299421324c32539b215bf40cb3b0119e345904e6a360b67e6f26131e93ba0a25b01a0137fab1856ba3c4c7f4b1bea94a8202518899de87c45a07356cbcc88a09806ded66f761ad2190a628b8e43c3fb72f177be9fcec2c55af405f36919872680",
    "0x538818d690c08d286c2bc8a481f3e2e71ffbbc5e0b8dc8f08e1bd5357a131687": "0xf8518080808080808080a01f11737b87ee8b7ce8cf0260948a2393ccd7c419ebc7a1a01530b2f6544a567f8080808080a0e6503c5a8ee1e16538318d3871c19313cd551cd03473359cb5bf734ea698da048080",
    "0x2050917b417d3de14a47cd129bdac9b915e2c4bbf2ce03b34accb9509131616b": "0xf90211a0e18c6e3e3338d547dd857c5ebb51f0ca73fc3748e8672e1a5e69d94e5fc984dea02d03bf0ec925d2dc89edfdb7c4183ee2c49341640f881f870eaa25da59481469a0228fe49283a0ac587552010bd7b887e32eb3d2bcc9e2aa8a3cec1a1714445faba0aa9ad37ddaece9c82de2364b50191df50c81dff15b77f4e5c2aebdbd6d3a7091a00aac9a47baa82416697e8c8a5a356d831bef17c7faca966ce13971aa5356e66ea01f7498352d7abc1fd4bdc18fd7d8b3e04cfc06c00c3d05d9ad332e20416b428da0b78970199f041a393a97ef61c7e85c765d15d0f930b4bcd2206d2d80eb170f0fa0d872f85c1fe20155e9bd655e23d3956e795986c2a84cc89b71d3a756ffb973b1a053133cdcc5d13c69c4b0b158a5d91410c120353fd8d69c3bd9e5e1019adb3191a0c95083d947d809218e964fa42cde950fb1fbb2bda3a952ec3074d13defd3d0fba015cfce38d3a0ddfc0155a229be81aa549739fdd68913a400b9293e49db7567b3a07a16e8278028cd85730dd2f3d7af9d867720bf7f606df0cbb5de118710cf7a5fa0072db4475c4ec75e3929919dfc4a72e592f7140ab74e73571adf4f2836a073c8a00677d76a6ed9e5f514978539a4e591b217ba5e4dc8b8649aa6906d3b7106b021a00210193a8dbd34b32fe0a6e2bd5bd45eb1b85ae28084c90eaf1d401c395f5157a050dd4f4171109522beb78ec30f8708731445746c78e735976e1b079b3858e74380",
    "0x50399c15665007c5767d536050e492e479b8329b19ce3db44abd02edd131330c": "0xf851808080808080808080a0141528ced5aed14e14842318e2bedbaad0ad4d48bb13bdbd6a20a65722c6605080a06a7aa3a2232d2536c121eeb6592fa027c1dff9819591eea634e472eb780cab648080808080",
    "0x33f5ed1ea10a4bfc6611e5d388313e31e88bdc98d5a698440f7b92655d4adaae": "0xf90211a01273cdd9aef1ddc6ca1399c14b2b0d713940d6dd78ea123cd98a401060663f57a08cb8b27973626d3b52d07745a460a0524f61ffbaacfbfbffe990e2b52d48af52a0c1ecce5519b71e47373d4d48f4b2aa086c8f2b34f0269d2a8246a67becb00036a0fedb3a07de181b2c6b8df3bac4999eb9e96a56e9942488d9ec8bbae112bc8294a022f0fe1a34ab58661200ba6d433010be48acc91ae0b1adb2233a1c8dd3b8905da06428edfe847e387c09dba4589df627b227d772d92792cb732019d5db4a72ed86a08719bce41046ea5ec997073dfb1cfb5a0878e8dbb1fc74318910d506f7f64904a0c6cc6bffa17ca35afc704e6003a80c04220243ff8ffb6357a4d8ef753e9c62c5a023f5af483cd8c5892c3e26d8813ba26a1b89806aaefc17e0c35705889daf8d42a047323817ccfb387729028ed3357f2e06bc928629f76739e5b2acd20ed2ece662a05c891a44d79221b7f93f218bc89e2953e4ed3c5a277f379e9d3385f6a9092afba0be7037693fe795d2413a3bf8863a1c5b292a43204babcc2fbe58f52610b2c489a0e1512421589c44a1f7a6123d7fb5396e80021595ae09b03f4c0981bba754b577a02b5c4c925c4b378899379df312d00f723a1f3e702e1127c3fb6119a1555204c5a08af6e510e50b695915c13dd1f5cb6d389428fbbfbcf5bf111b7d37e903bbf949a0e65bdc42f746f90b794a52b723509e753fc857584f824a880628d8ca3b158fdb80",
    "0xafb9f428babef2ccdb83b7b5e432d72b49d93afac3c3a124e61a4ab09d9d71b0": "0xf90211a0b0c0b59f6768dc1ac4239a5e7d53f36744a3a557f5aec2df775b7b2ed3c154dea0c0b09f7bb04553ff3f6512d7b5cf54b1b4ae2237b72bfed2bd9d721441e8dc08a0178718ff97b72cb7486d9ccdda15270d7ef3e833f5b230a537e18e1db327463da01bd51a329d4f6c74215b1f289dfd9908f2ca4ecdc11d97600a60264643aaf6dfa0748dc8fada9a90108285602e0919f26b8a491b6b0b42bd675fbc3ac673e77255a00a65800b35d0e5eb1d5d2963c4fa6dc0b8d27a71ea4a9afa95c10048b629049aa03c7648a634b8eb61e980294d723c1005cc80f6c49ff36f1a0c50ab33385a01bea039d3aef58e5368c26583d987fa50bb49132a20a223eba5aaf90eee2d64a6627fa0b8f874f3568bf37bf9cde584234dc36de7dd77e5a5b54c2f00ab6dbcc768565ea08d1b178ab1259bbcd0ca897d9026f99e8561da0d2540c3a9714ddc082c0ca750a0286239c2e995f5d22485affa7d5ef3c5378c47266abfd73e8cc7e67911d6f70da09d07107e91ad47aa262644e467454a32b6f9ebb63c7a857a02a36fa20b1f97a8a0594599cf089f09693c51452551d37a73d58893ac7f2fb02715503dd581d87534a043def45bac1e53fb42570e3d03e68c29cf753c7d3dcb1cca82e1edef8ce8624da0681f5ca41c86f021e86622002fd82c46057812cd60c9e1945d856257954b6a38a0cb2edca900a3d7589cfce1f81b6fd936241202ed239f25a2f3f6a2baeb88078480",
    "0x8d1b178ab1259bbcd0ca897d9026f99e8561da0d2540c3a9714ddc082c0ca750": "0xf87180808080a0606145a72e1dbe55aafde0879fb16bb43a5f0b720ed43673b783c6680646915ca0c3d431ffe9a305d6efcb2770250a30a5859fb52af4c75026bee1be967584185180a05bd74203ace882f05e05aee789c015ad871127fa5e6639f40c5e99322dafe76a808080808080808080",
    "0x420828cac7a837bc0760d9e68959998d28f32c5a1fc81efe3831d76758d1ab05": "0xf90211a0bcfa524b9322a6480d0708147c1853099a7e2952312466e8f820b01515f0abe7a0d7348496e5db028b9602d88342e705776b013fbdde6e1c2c3a3dfcc660610727a0d0b3528ea7f4cab1d4569a3d8ee5314c891f6648bce46a97ff3a94029605ffc8a0aec06452a56dfcf24c31682beb3d895963ad49a085ac345925c3703654720c45a013053d9ceea71c09b856582e0f96ff9d5e3d6dfbf2b181b6368cdaf0ee1b01e1a0ae4e36d62eb8798eea25cf8ac30b6bffc2c11ecfca1405d23a745a25ecb6a0cca009d29066b97fb818525e012d872cb81212783e8f7e22ef1747d40fe264a00a89a068bf3fa94ba4685d62fca782b70493d627f6bdd1d31c48e51e1f08f7099aa800a07a455cbad2fc7e2e2cd6084bc16ce9fb435758561c754624a0738f5676a7cc23a06c4bafcf7068da8da9548bd307112f12c61757eeeffa5acc6806c52c84ef6464a04b9e694eeb007d4986231d2283f9d64eebd86b990a12caf8c9e21e91aa4719a3a029a3c0031757e1357f0afd45f4fff2b300ed5ad0aacd4f7ba91240ad529bbdcea014657763542b9cb5e6f58c768a076822b30fddabd605b79976e3a1c57313dbf6a058388a59330d4c58ec9c279ac28a3b16e4d51cbdcc0b41558314265f1bd5b2f3a0ccbdbfe7e96c9f9033246221a17729dcaf2c9c69fa0423cae562b6b261328feaa074b96fe117c651ce38a7fd3bd061f2c8df64e3484d0a2596cbbc4b8bfc64c8b780",
    "0x0a89df20b59038caf66fa52b28f0fcf4026062dbdd8fec7b94bd732b45e17bd8": "0xf901f1a05a324051586470aace68e5b5a4883f77b318f634ce95757eaeaca217cd55bbe7a0538818d690c08d286c2bc8a481f3e2e71ffbbc5e0b8dc8f08e1bd5357a131687a0b88267d2f9d149e287a89f9419568cb45b360cd6018085554a01b234728c3207a0e9008f99d96af6c931e513182b9de69caded516b74982b5c970a6857da40ca33a07fd49c9c643091692eb3ebc54b525949fd3bd1fa25360707a05f1b13b5d330bba0c5f4755e13d480b552fc91e30989dc5b3506e8e6a0c828a12c1f883fd480174fa049b8fd04b9256b4daa8c11cb93139d119ad3f1e8c9af63b7e05d5e2bfb170e72a0133fe97a4aaa594b72b9a3274a497461e9f9701f8cfe2397c35ef77973ee47b4a0622bf1e051f5d3a66352ac5631a5a602cea68f85c4e9cef142ff8583d93a98c7a0e606342ed06bc39b0fd75f9e80f8674cdad21a9e0e4546af627c235a18fcb313a0496d27c2e26154d35b3d0f5d34fed5b335657830460558183d798fad116c7357a0bb7055e20af66045b38b1e49f7a886463fe3aae7d5929a960cdbd7f2f3852e96a0a98e96f39562d5e86135685726f219af37fc3355e89ef555154514664744d37d80a029e6cf1e684eb7244820318e00c9b687680e2805dcb295be498ac3efea1a53f9a09f0ab5befdbb839750d891da3466758f62f6315d86c268f2a3418b01bfc353b180",
    "0xe1e342b86cfa94107d82c21f9999b2206bf24d1d2b3d09fe1e1ca66fbd1adef6": "0xf90211a0ff4c39de6c5d2decb91dea7c6920f058f7fa4efae02299a2a0dae293dcdb75bea0d372b92d1125225dbd2bc911873bb670bd9761250e1adc21e8c879aae3414ca8a07f67ecfa7890ecc7f0ed08405c9381768b1877bd6a368796d65a7cecf1098578a0ecd54e809a49ffdab9e1ea5d89bb0789fb7ccf197da279cae711223bdd73fa0fa0af60ec073562bbbe9931f33e513704e93a6d70f787e07b1bf97f9a8b57622bfda0f44d3cce34756f0ce8704a09b839b473d69ae64a8e07470cd326d292bf713afea01538f9bfd6b475ab8df31e10a6078aeda3b0b3f1b0eddf0ff1efe883dd11a3dca05eda8385e1b46919b0d60e9e8cda18069fbd2222dfe902930bb8ce8bd8e9a888a0c84769357902a35a5bff1163de83361088b2c3fb11e67907bdc716fc1d69c15ea070711058e50f642324a28826eab32aab79ce89cd7fcc10593e8902db2838a77aa05ecb5a899e15aec4e93cbcb4caeff18df39406c2d3f2754fa4c4b06e2f4150c8a0008cc518d29179ac71e0e67606a3cc404bfa4878767277c845cb24e665b39ee8a0911ef7a4da787d5cb0a2312ceaa2dacfae2a8b261a16344fbfd3b8bad8acf0baa0ca35168ef02713311e91bce710e297ec0b35d065897ebbe392796e3723d29adea0208280a9edc6b89b7c70db4401036bbdd97814484b147363aa378f579e366b8aa00a89df20b59038caf66fa52b28f0fcf4026062dbdd8fec7b94bd732b45e17bd880",
    "0xa13a27d6d664cf068bc3a5eb5282719286d87a7dc26f33d524d89481e415a834": "0xf90211a06f593ab582bd453931797cda5d6766d0a65ad767e6b2d099dc53b82c34bbbdf3a0740a9f8b8c696a18e47d6053719ae3f836927a41ac03a78c97e36b683afca966a0e41dc4ee66008afdb70611b733e0616a645746a8f11c2c8d674e455247c24bc1a036573ce69f349d493952e7e46556a6525e6c099938aa400748b69cafadb1571aa011121c8f71498e41a7e3cce56726476d773c4f88f92fd26936b73d80622c2b1aa0fb80a998b12d61ba07d0afbafff2335d1a0ab6cdb0d33e29f3c3a47cf8ceb636a086ea791d7181abeb70d38ab05b743a85b64e2066b23e9d12449d9d2832cb420ea0ef3278f8cf343b5b2320e9825eb7ae4d59cfa4986c65909333d018e46f90d419a0ef1797bd0e0e9c2dc7166575aa7e976ca5c43a303b3b0f49193389e486b43a70a055df5f99cc90ee2f3481b67c8088f0707b4c9967b12807371f16b80c7ccaa309a0bb4328e18611d1b0a95633aaa794b586e5baf5d1fd6d54966647240cf306472aa0b76f84d247d9f207f27cfba1753f55c62a142ec28fa606aec840f071a20d5563a0df8e208026364b3a720b74715c6f0fa2d44711feb0116915ceca8368db14c113a0c66a11a6fb80510a0dd45316bd5b960a01746286c642a878f4e776ca27cf8bada07d351442a9c3aeddde2f1f81d0c0ef439fb1638da122f70909e493201f04867ea0e7c3c8c0c2c41a0f00f1030da5008ae91031679d23909ff63ee5b17f5054e82080",
    "0x976cdf67c0eebe123a587af08aab6b7c2553db2d7bf2064b97ad3d29629d8624": "0xe69f204ba22562575d9b56e8eac807be3d98e3bfe55e651d4d90568cdc8b3ef46f858466e815b0",
    "0x78960421e6d68665a7b058899aa08ecb1de3dc15f1bb7e324a11005158f0be06": "0xf8b18080a00b9e24cf58856a9a1b7e848907a96f3f16d95f722567ecd3e5eecf867e10495b808080808080a03ea109b9856fae2d26e1dca63ed192d56650119a4d540128908cdde0ade10c72a016663e46549aa1f896163c16382709b5245d959d0efba9d48b144d41ed11f3fa80a0589c6ecd51ec77853d7a753c17e72ee9a5852b9903df870e5438c9470ad4f70b8080a03804a82c52e0a9560ffb626c374dbd20d238021a4c300fda50bbc000dde2346c80",
    "0x2450a0d0b16ab21789e64f03e16a1ae634211ea426bd5d898e9eb28ccb288007": "0xf90211a02e502eea5875e15b7b19e6b26c4e9a5ac3ccbd80fed59fdc580d6afde7075192a02c1110cb3c2ddfeb5e66e82bdbfea1295241e55d2eaa9e308edaa6d396bc300ba0dd1d899154eb9d7ea9ba325594aae15e61dc95261342fd864c81ea1be7ce69d5a03d4b2b832dc57e2ef7d785b26f97121464aafedfcfcf0283bc1d911de890ac85a05ab4899072e2c804450c69c33e4921d8459f04f909a00a450c1e12e3292c5f9aa04ad0148a91dd95a826d9c2ecf3c5ad1e84cbf65036cba14ea4ec2f422965bc26a01526aac920835695c95acb2cb50526d084a453c366110c5c50acaf8d0109a386a0dfff80abcca841b3d0b781771c68150d7bf081bba1a1a8682ccc61db2df4b13ca01782361276a449d8fad6a2a3e4b6923aceee4bbfab04f0734bd6b60d82532877a0274c4aeceb0a7d920ad15bf9eba0b3c0240b62e7904ddd83d6bd04e1992db7b4a0b57a875b61f480df004d2973046278d85b1497fbbf38c2a3e2cd3faff28741b1a04a2c175bea47a1923d2791aa01ff15ce57450e98b6ec8190d2be0d6ced42beb7a00e68792e15d0c6f367030d95598af98ddc2a339e7d38de57a7fbafc98b333d6ba0f8b53239bc34b5c82713d387b4aec1126fa46effe697cb8e34784840f8e34c37a0b814af930b830d2fc4894a428f8110a68a39a9fdadbd71ce188c00e8f45dd61fa01e699b5d41679377bce6b00b93a3bf1262da887c5f9cef6da8e8a207344e6f7780",
    "0xead818ce6fc6d7a022277cb55f01a328de8a662a1390ce7b1fbaa8817a4eab34": "0xf90211a07e59a243f60177d1c3a07d6747d25c3bc6e0241f3cac181c6f1473f6f78df4e4a0439d535554ca2bcfb70d251b73b3d3c216def150aaf2a52a2f91d766008a10f0a0294b2f569d338d6e7379444236ac861d602fc5cdf20ac0ecd59a2e360a80685fa0cae8cf27014fb242b795844fde223466c8d935f35865205f8e34242dfccdd4b1a04567c1907c7eae86add336575c982a7783c513e3e5ae3aabcf684361ab72b76fa00b31864dee3becaa72dfe2f3dec6226f0f4c2932b6ad4467e09853d5dc271d4ba0a5c43d9fe06813c0445d315695bb01ceeb8ef246116895b9c9c6ca65c23582f5a0f2d52c2a53b33c1b1d96cd073908a627d7d8291e75d6d8836de77552014abfd7a0379b9920f45cade9e72666be13f89b629f3ca028f8a394041818ec9992155d17a0a78691a4336b3869ad3e1ee8b308472ed2455760c49bfae8bdf2ce21360b605ca0336fc1cd43124eb48c5b44e68ce5f68b18888f584cf1f2504dcf5e1d0ad2b40fa0e38578076205d3ed97adf91729539001f77ef06acc81e997ab16125b576dc14ea078e8d8efc26bffedfbbcc3aff0d5631f59b7d7083f20a8790e710d9b35210ab7a059b1a1bdd614a8834e140bf8480f668cb80b3eeef5447e80542c9851d98356aba0806f2936e0597e3fd8de0658de7b0e97cabf80d7aac8c3f924afca0a77478c05a043f9fbbd5a4ea60b48eb2a1b36d3e2bd48616bec88f308239e1df76d52b4ed3280",
    "0x233616dac5e708318380f37d962cbea36da209593a75726966bdc530a0cb0512": "0xf90211a00cab0f502e45ddbf635a60f088747dfe5a5ae3987aa94969390d8f3d8201e9dda00cbfbf9d1219e86f37fb85679e0fcacdc87bc1bc7398251ca35027254dcdf16ea0e7fbe3cd2ee503a5bbbcaf29c7d09f45c670c739a772d747be9eee6873e2ee9ca022397e4aeb13d8264e4a57eb32e40f981ed46ee832bb8d71b140f950920a30c7a02050917b417d3de14a47cd129bdac9b915e2c4bbf2ce03b34accb9509131616ba03514ed502be9e4b59467e4178b223bb92f6544946b045a61f52476efa89da90fa02997bb07b56fd49bb179da75c49b2d44a62e88789f35eeea8663d814d414ec3ca0ac10da4a04f27122e0eb47c2924906a7f71d1b252a4114e7670277a11c544ad0a0fe57fcd620512b13e26cc1c83be033d862ec951e45c47b2132390559fccccd51a021b832cda0df71c4ef8388e1a19c019d568e5631583375498f5068233a021d13a004aa7c8829c503596aa5e37848d9d0e9fcff94a339b51aa16de6e698aa8f1429a091fcb8d8d4e77a99005edace6962c12c220d64597ac1a764bae4becf1a994ec5a041cd067765faa289e32bbf9f9a5858a3f23ec03c4fc5a9df60256a97fa6a08dea0f27a91bee47b46fbf8ebeb9a4c3edea4262d4b654f0179c3bd4c47db4e573f3da0347e0e3ddb9a0d884f54c3c1ebbbc4c9bd58d091933a3bf9f4302b69c11174dda04bda04e62b45b6e5448b826f3f838bd7d84ebd639f5aa090da8022afa978ad7480",
    "0x1f11737b87ee8b7ce8cf0260948a2393ccd7c419ebc7a1a01530b2f6544a567f": "0xf8518080a0c21a11ffc66c01cb7a885ee08dd064029ccfeedb396b48a0c4e462ebc386637480808080808080a05bac57caa55c72cc912e191e21136de2bbcd98921b2872ee5e6f66a9edba9cd3808080808080",
    "0x0677d76a6ed9e5f514978539a4e591b217ba5e4dc8b8649aa6906d3b7106b021": "0xf90211a05a8e8c702ec478cf233bde608dc7fce230ef9f7f2f3ba45eb91a51cce1fd0514a0a43109d00f0e83ee54fb1044ac8fd14e8fae582e9f0eaf2d7e81f40db458d3e6a0ef4cbae9f0855d560057f58bddcb6bfd151fe40fb02b9588195d7bc26670ca78a0763b4e04a6be70a2ab18f11cf3509038e4aa9f48c83ec7f4b8ddbad88136c1aca0c50d5429f70d66b3a42337bc53bafe4948ddb7a7729e69491f12f086008f1739a02bddb645c11ba210e8dbcd882e186aff3ab4f64ff25010b0f95824d1b2042980a0173004353d81424d6cc65d43c41f91ca7fe46d0fe73cf288db09dd8b66e24c32a03c13fda6e1594f4d5487cd8675df2132bca72c9758a672183d700e4c50afc760a08ccd95088d77bad1ba4e5e5959be654277bd7d2daa6c2530fc94663219295c64a08e2fc56b2c1369fa29c6ae1a90c99a13f5cc2e647df92327870fb2cc2d7f6cf8a0ecb3094de49fe3fd6ab504fae672c9383d3d1512fc9e1b768a240f9791152be7a09d4d3ea487dad532de632b5e33ca03ce421e3d6b1f6028a4e66f014d5ee1975ea092f3aaebdcded3874fdade99cd1459461ce0402e8c75a2cbafcf5464296e7b6ea07f99772ace635c58c7261ac6112c682ec8cfb756cd697788d90cc18c3cdbb554a06691bb48922fd0cb4807ed2ceded86e3d2d3d5cdfd2db1fb78ef3ca809a97ac1a04b15aa26ee24ac5077196a274b74bd1b43f3b495bb470859aee8ab86c3427cce80",
    "0x2e502eea5875e15b7b19e6b26c4e9a5ac3ccbd80fed59fdc580d6afde7075192": "0xf90211a075bb55f057afc086799458e56f11983398a70432e22b73135b3c211d5f5db552a0ecd20af1cab2beada017f727222217978395f3d2a21421d795d3cad4a88247f9a0ead818ce6fc6d7a022277cb55f01a328de8a662a1390ce7b1fbaa8817a4eab34a0f5327347fce6a9222ff5d54de72387ed2f6ed7c10995171ca08dc60e8fa34e90a0241287ef2df00ca1db8346553ab8e334c55481e610d29c3a07a316c3035634dda04243ec2e225eac614faffb19101b98623b2e6e64c12cdf32fce51518f81be2a6a0cbc6af7fcb5924ce9f4de77a56147412f2f53d371a87a8233178411e70a911d0a0cf45a4261cc842dae0e7f09dacb33c073eaa590ce2ae4425585a28701c141844a0f49ae1289f411d83f51b9b4b31b66a951c668a433075d5d112202345bec91278a0e0b78df26f151aa76aa0e7081a0494e3bcc904f9071e4a1d6bc9dd65f303fe47a0e4bfa6c18216869ffb49dadfa3b4cebecacdd519eacb9f8c63bcd4468214aec9a055f4e6ba69661957969b3c29834f059f3b1ae2f1ee88700630df5621cb637fc5a0a33b2ef7c942bd273c2d86855121b484a3fa8727d9adc869d8669a7d3c2137b9a06f59e95374cf07fa791bd89708542e917cff358d62be2d10f208f811dafbbe3fa09af7c1f733395094258a827690a4935e2191a7b84d5818118108f3f3db8ad5d4a00bf2e834b91a330f7dead0377fb8a7036706bc2adaf694137c730154faebe11780",
    "0xc66a11a6fb80510a0dd45316bd5b960a01746286c642a878f4e776ca27cf8bad": "0xf90211a020b535fe43843e44d4459d7ead6d6fc4f15652d2ad038db8019dd9a64a145c00a0c76efb13ab64444e19cf2fd231e692f602f062ae366444fdf44f4f9232b2246fa02c678bd1d9cbd429dff79669be94f9cb964cc16cde48d1ac34d35b79675a1712a09c9098d90c8c3e07a116d2ef37f327064bd68a5624a41ccfc0390818e21ecb81a0afb9f428babef2ccdb83b7b5e432d72b49d93afac3c3a124e61a4ab09d9d71b0a00dbbbe169d6d96c405308fdbc03c471a6eeafc4eedb0ab63e533bc3eecc4b8daa01a0f97d4af02f18f76e07eba9710ddff6220be795fd11b937a589a926da1283ba0b006c231cc9533b9a47e082932f573c8da21bb0d203662b93ff4879f7bd5ddf9a00044fd23862ff2e563bd4893d88b39d28a1f8069222c5953bc4767101d2d500ea036253803206d653b60de6961adce69af5a2f6b128674a4f88f6260f9377a2827a047a7a005312f4e79aca48bec6fb361dd6e0638be7d19a0905be95b928b3023b8a0c24507df43d0cc3dac1c98707d514f576f73a10610eb84c8fd91189aa353b683a027bbc787a8315090546d80e2c88c5ba5d94165a458191900b751309ca31012efa0ebd43610ff3d1bd209da22f023f0b39d6307c0afe86f8322f5988544b73ed0b5a039cde7bd0e0b47ca2eecc1bbb3a312835b73f8ba6f39c7e42b1c602e090e9ef6a05e1f229dfcb764fde8f22768a2793325d1b953c7250bb451b562564a1a3a41d580",
    "0x3514ed502be9e4b59467e4178b223bb92f6544946b045a61f52476efa89da90f": "0xf90211a0fdd9766d51e90b5a00badf8ad9b761df274d5c364d1d3bad5f91da5c62543748a0c45ca47dbf83a769e7b8302771c2d6d0d858584c049a1adfb3723edf16f8adc4a05f5f7aa5a728874bde831c28d2ca05f0f0a36320fe397ffa6d0b0ed92e0e2f78a0be8812654c55c3422e9a6d644526ad843cc6241c490a28ce4b3bad6cc516b8c5a04ed44651f954d6186adbedb70436ccdff046446109f6b0a9aa781def7869eadaa0ef9bfc1a2fe9dda43ca99067c48bd788dd8c92b2391720eecd19941590a11b07a0a82c6bebd1ac194c4fc8726b33e7a0d2223e1d9dd11f4e33f31e964ca504ffc2a085d62292e8981330ac776f22cda1a3f7d8359d4c66058ef2bbd80f495955dbcea01f3a69b66184aa7eda71a211633b2da4eb25357e1077c7327effb82286a7ccc7a0b3d09198a50f8e8183a999dbf79f368d9f48d63b4d3401a790bbf7a9bc441f1ca0742c51c451a078256f9db2405346a1080abf5a9d5830731e49dee6f5c6856691a0a92df98a3d758945363bb27d158cea654dc3b2c5cc344b6d1356adf98c4bce66a03bf7be37dec0e9198b9bc7a42380430ad737efb4f990f045acd97c6beebf382ca0d9ca7c76f89d17c645330144d4b81b488192556e6f0f6c67004ba6ad4f3c7462a051750a1b2adcdda7d57727783a2c22d16e698305d26990ff5e0ca10ac3bf9274a00dd808f7366c57a752828d47928cbfda1a477306cb5eba113bc937fa526e083580",
    "0x76fe02b15341a9d234539c8228570c7fc5b5f4ee1af5969c68a10124a63ee477": "0xf90211a0ab9919581d63158d5de79d87d931958e2781d13b771d126f6299fbb802bc1c85a0a3f503defc693f1fc2b31eeb850407a89d17dcc97071bdeb69e54be3363df1b7a02c16e1ee502103f1982b4887d470b4c2d00371fd0c25da19ea16bcc4d05cfdb3a0bf07c69bbdc36c4b2ca8a029a9e40e179c5ad1994c84c1caa2b9eb495be92d88a01da490cc599a1340fc0115db6b050f67fe7daa9db886189957acae89d257f6b6a08f0fe33d63c84ebf6f8ec78b43c0ed8be5fa3151aa7000f68ae37042775add95a04794801c0388d588cd9133401bab114181ce679d2c7aedfcb97a7801f9df2402a0fe4886c788997feec9ed7008736edf683cf45c6a8e1c44b846cb7ec12b0b89c5a0891a03429eccacb9cce9eebad17b6d750d0f76ad938fff589ff07b476b73c731a09acd610b6af687dc8024ad021b1ce765aca63943aa1044d883c6dfda5a99b467a09acdfab28d5387b8e1a7040b3db45cd4b83c323301532836a0827f8e66bd8791a08f575fb3c912efaf604931305cdb5bea5500005c37eafd1cb4565f0746ba711da0ff593b08bc6f033a9a4d0ab44744dc3672ce6169503a9618cbeb5a4249fc47eca0ed294c05ed5e45271cecbfa3d9eabebd83d0e312d057aba6f75538b1dda35849a01a377735254e4bf5759e1513bea8a401396c76fb6131fbad03a8f65282eda164a0a0595c17968026b3bf3caa8b508d885f6bae964cb22d45c246e7f537088a1d7e80",
    "0xd0b83de8fb464185dd3130f81025850c8421853e40e6c75b6e535d393d2209a4": "0xf86e9d3f35d0292f9121ea47aaa74273e43f41a96644b7a11c80ce2777aca62fb84ef84c0188071ca45fe25b58b4a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
    "0x16663e46549aa1f896163c16382709b5245d959d0efba9d48b144d41ed11f3fa": "0xf8669d3a92c6bc4c13a5ec45527f0c18ea8932588728769ec7aecfe6d9f32e42b846f8440180a02450a0d0b16ab21789e64f03e16a1ae634211ea426bd5d898e9eb28ccb288007a0f57acd40259872606d76197ef052f3d35588dadf919ee1f0e3cb9b62d3f4b02c",
    "0x4bda04e62b45b6e5448b826f3f838bd7d84ebd639f5aa090da8022afa978ad74": "0xf90211a0f3089a409cf822ce66da0c6f2868d7dc585767f9c73fd7e57738691e4b5e9592a0a21795627a7c483df54be3bf7d40939beca125a737fd023ff83ac842b3fd56e2a033d1c9bf61c6cbf1fe3017f1b311770b28f0fa5dfca8ff720fc6b4ae9a0242cca062c19e802e5d64cd0ba7cdebbb3dde2a6711b0eb70bfc42de9ed7552b699c101a0d199ba0a107e19e847c86ca6be023ba54682efba691f36a6b146851aaff7405ba09736c9b097f7e936f0470b91f2dec4a0c35489904a1ee60593234c7fadb1c38ea03200d50121f466b17a7508ce2b1ecce821b7c0f2f1ae305291ef76c8e7a23d87a0313b660f9857f48d66efbbd870409bbb4d10b9afb1d3e3b27cf3944e6308dd14a01cd581c4a65e8c7728b7a8dccc86362327923ca323480e9b36eb13b024fcdf47a0e7229d814c66f37b30896f9fe5c1535cbd72cf4c03eb2264452dcb6cb5284daba0e49f65792a8310c8ef264c27680249287a6850c943e71297902377ed42634f73a0fa8ddc73c0c2aae6d5c3dfa26c0a0dea9dacb835635209c52b293361f0ab478da08460901a5fabcc44b4ed150e7005fd9061b492db889cfc55cae349a88ee65704a01a67de1a30368aff11bcd510ea1f84620d5668526bc14a59d7323a99e8d908fea0c48a25de3d8a83544b99768e23de084462b8211af5d5e694474805711f7da6faa084d05d08e96520e93c3a36c1d169ad1b64fe76de9efff9d47854db3bdaaa8b5f80",
    "0xf13abdabb6f55e3022d6d7d59e8aea288d404e4a7e84bc3ceca9a505a50cffb3": "0xf90211a0a6ff1bc2808925a72f0062cb1965ee5c530fc1a3f18efc9d121237ddc31e5af3a03bbd0296833f1a44fe7d0305d2af5bde9a39464b4fca9cdbefd73bf27157797aa0794cde214c6483b44ca8be6d5dd1ce96239c8dbf36476cd2eb005239f06a8691a083be3d8cfbd3ee81581b1072b009ab9e2b5fa811c35e90aaa1a016eabaa1c67fa0d9011cd415401b217c16963c4e57daa8e21c710dacbcfc013764ac4a54eced6ba02f68a4409adfeb9573225be611810a06486a84a690914daaf3e400d6a1b4331ca00ee00dd471ec6f9251678a9a5a3eb8de18064b35fb5aa3c35fcdfbccc5e2384ba0176cd6049f9f88672c84cf86d4de9eb31871fbc83925b539266f5f6d7a907612a083734b1d2bd76d8d748a42083c7cdf8a63807e8c4cb7eef52959e5e4c72cfe87a00f5b17ee0d84719f89a6a1d2a27135148b4b33f07689c9f0cb1d3311acae5d88a0fe214f6b9b8369bbec54414daa97fb2ea0dfd824a51448f36f93dfabedee8ef1a0792041358128a6c261da8104936be72cd1fd5b48a01edb22f1f38889c176984ba0fd73de7da2e0f86581c366aac65149c498b41ac88b7577bb6a76ce4d8caf19e6a0e45545b1dbc5ddb87103da620c8e1a6794ce3bb1d1918700618edbaec125512fa0b21bef8ca5dc0ed135e761bb0fdc22b09b3d8b7373ba381f023858a1481e69cda0858b54635aa7eb631e8a7505155d4f722bb203e0461bd47baacd51ff3d08313980",
    "0x0ee00dd471ec6f9251678a9a5a3eb8de18064b35fb5aa3c35fcdfbccc5e2384b": "0xf90211a023bae018e9e6ecbf681c3a0496990253c655f571b2d7a8ef36e1ed6d50877eb1a0dade24a7210e57d58a9fe2a5c9bef2ec86ba7e32c2d120b5dd02cb920caed5e8a0d3a854e8e72c0f2d9436290d802b6a2ba7e63b12a57e02ec138261b3f28cd019a05ba6e2173f2efa8299287a16841be07990b7745a020e5214fa98608f2c114fb3a0a88a7a4e5a0a6d370eec98fb3e8a18cb283c43f4ece7e2ec224c6b5d0770c69aa0fa124e76ab055b39b0f3eaa49e497f82a711d6fb4e573c5e509530b24ff4c70ca00ed6c03bbe45cb8aa77754897f931be09ab2b5756b1fd3d55608bee4172cd535a0e096a4f18d2ee757b986439ac09f12c779d9bfde89367babed0b15ca0d576b29a04904104035b9692cdb7be0f38fe5bac1c1d93883f6304b7e66a73f2e1329f954a0cb76b18543d519156ab65703c2fcf7a8850f2b4524ecf130148d6c2a61ce3d73a0c707422d04b3fc7d8182f2241841e075d4895e5f2cfa771e7c5f2c0bd1da2f6da089dcae0b91627e7e50e3742bab96b415fb1188f1aeee06aff8924e394f5062e6a02253331d4f0bc32003416bf50f6bb75397a64e56a1088727a2cd213745e34fbca05df8b6a02f3b16684bd6cb06e830404553937490da0d4034e873144a7d5de909a002c18e121278e82f2854aff602d05a54c9b4ffd7932b60d42a1b1211c5f4da74a08694828637057f46c1a9dfe9c1dc3b829d66b0e5052b65b9c47b741f644db2a180",
    "0xa1a3ca96ee46e8c74287e025e393e5cebc1aed646c9ab20a13ef2ddc2062fff0": "0xf86f9d35c76107574668884c86f0086dbc124f542dc52239a4734e692810bbd1b84ff84d808921464ecd0d78e9a7a1a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
    "0x8460901a5fabcc44b4ed150e7005fd9061b492db889cfc55cae349a88ee65704": "0xf90211a0a0813896f3ba156b32274cf6bd81c0a4391f46e2991e3716eb8e8ce4d72cd5eea06764d3e9ef67bd5f60bbd0904a30a3bb7b931e92b099ed662fe8f08ffe135d06a0aa7ea64ef7d19f2368a462e642cc6bdff828fd73f132bcaa1805d3a981012c9aa0b008a5b9d82bd8038c5e4385f0e248522c29ed052f6b151fd2a8abafcc0c24b6a0dc953236a09627b05d5d301dcb18cce375a9953c2825ac94874b01a6bfcc6b2aa01fe0c9064743d08f361e99c3a501325d0acdfbf96f72107087d0ed8da927df9da0281a67d29a782cdde8965cf4fa0c4a7f07f83011f3a6d513ed4b218aca31739aa0f858b4a34e4d1bc449ed24a6f892f8cde36232b8929d053ff69abb5a631defb8a075d540f9289d82676a9295a30433b59a0a0ee679a3d83ed9171406329dfa6918a0ef31d94490ce9fcd3d17b6609efd6d0f736864b3930618aa591cad6c8eaaafc3a02de2d0176028ba9abe7755ac102b50c294e7c7c9533fa83b23b828d759c12b66a0a13a27d6d664cf068bc3a5eb5282719286d87a7dc26f33d524d89481e415a834a0263779380e2f70e1c625b7ed778a7a0f3a0af92861925345c965eb0a4c308fb3a0cac65cd9f5302cd4d66070ad60b262364d6c4e01b83efadfd4bc09e5b5c8f064a0a8c7f28b4bf900aeedf5a297bad794a47789b47658174e618cbba22c8696aeaea078ed2bab99e71c918a1346e8ebe07e6614ad36f914ea39e97956051dc079049580",
    "0x22397e4aeb13d8264e4a57eb32e40f981ed46ee832bb8d71b140f950920a30c7": "0xf90211a0ee6ef56b3831432c5896ffbcf9aba7db3ff6341afbd977e41caa75ddd43f83d6a0e5458034332c1a33c936e8bac0c10055001d6e86a03c5d4bc95b558bc428bf32a09bd1829b55360aeabac2c70d0e11b91663a2a59b6848955fa5095d27f071fc21a0e8e60e2f53b59ef2a3c1f85b810dd2f60c9d9b60d8cfa2afe5abaacb0e94779ca09e353886aab6cf8d4e75bfb6c8f89daf8dc58e8855e3af350924b4194b20fd1da019cf170b1335d9647514f59e940cd9c436933378e156e31e6e30703ce5c67c28a05a0020a6f293f65843eb46e144b55659264eb4502be68e2c4ec34027efa3c2d2a07a9f35c51203bb5e47c3d9b817de39ba93bd4490a633781be1bb2a109b0149e0a0fe3e76700f678831f6515f2164db1bb9e97b2450796b04561321c348b73acf26a02bd32e24cea3a9c266a79f6856e7c1df1e207f1f0d12ca58dcb77f731fcc9ec8a0362298b317bdb70fff9ace55ab5663f0df676fdb8b5f05d7621babb56a9b6b42a0e4bcdd387fe1bd2ded1a273b000a37b0dba773c404cfc20f234fb60bea662987a0f73a92d0d2c537701781be388b58aba147703c1c5483351a12488d827b46eae2a02e87032ce645c223f73d6a7016f70d2fcaac62a2a342b613622c0c65b6a42785a06111c3046349cf97983600ab9f483b9b957e2cfe2fd897f36f9e96bc07e52e55a0422ebff4e424ca279a5d20a7813ace2ab97326b658b595732edd8befe9c4f74d80",
    "0x4b9e694eeb007d4986231d2283f9d64eebd86b990a12caf8c9e21e91aa4719a3": "0xf8d1a059dd0d3c75c32e7ea39b26d75a7d5e54bbceb251d02f3e1540ae41aee919d21980a0693b81b7fd53909c57a7b07f949d319681e1e8841f99fb077e2c85d32ad616768080808080a0e8e3001505d5db25e2f1d5673061f362e789cbfafd2de0d5613d425e19f23f2e80a0dd068f62a68304fc815ff8d283a922f6fc78253ffda38f6b9d31121d0a294bf2a02dba2ebd4f44a1c90e82485464d35b0d2724675e775f82286f3ccac233bd079180a0d0b83de8fb464185dd3130f81025850c8421853e40e6c75b6e535d393d2209a4808080",
    "0x5bac57caa55c72cc912e191e21136de2bbcd98921b2872ee5e6f66a9edba9cd3": "0xf8729d206f170f6eadc9a25126dda9dae75c3eeac8f7b2ebddb9c084968e5200b852f850830327f38984caf443da5956dafea056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
    "0x6a7aa3a2232d2536c121eeb6592fa027c1dff9819591eea634e472eb780cab64": "0xf8518080a04b3da85214fdba40e4e3c3a655188722b05b40685266bef10957e42a3d9904dc8080a04afa3fe43c68014e8c1a9fbbf3538869ac583af619af28d672cea20d40d7bf0a8080808080808080808080",
    "0x6f59e95374cf07fa791bd89708542e917cff358d62be2d10f208f811dafbbe3f": "0xf901f180a0b094ece4045f580d39eb4428d60211522a8caf55157d8426d70b0af338d2e33aa050399c15665007c5767d536050e492e479b8329b19ce3db44abd02edd131330ca02987246800990868428306c4e381a1aafa05a62255a592782083afc5e6afd54da0e9c902b959ed9336bce0477a40844d07a1af2c62118b22c8c8eb9bd91e504a7aa0a6b73bd7a6634e63dd39a2a9df39e0397bce78ea125a090b30106706be39850fa0c2196b93b51605074e15a232888a393831a2ddba1621a9e015c243128cb787b8a036e37cc8b72a96253e11473126b269690b4164724afb63b8a409cbc856a71678a0c0025612ddf7d2c50552addadbc583a9b8bcebf4af41cd1aae7c9d518347d3dea0868b0022277913f2c063ec231c287aa2ccc8a6c90fb13cf9f568044008773a27a09cdccccc281ce65dabbb3e85a7d62e4e929fd162cf78bed97cc5a318d64ca140a02afe2a385637c621ca2318d6fb15ef3d61b140303eecd8c12a4268d1025f7c89a0c9e498a7a192e4e23d7e80fe4f2885c32c414e2ccff7373bf3fa652bcb7aa62ca001d02043290a104347ba1f3b15717e586f94b0d8b6ad2a7a0ec488eea506c916a01ab172b5f2fdb527f2cf221c00b48ee7cc11257bf8e83878056527fb29284962a0b07a50de908e4b1417df837001e099f73fdda08edf4583896aef39b42b8792d180"
}
        "#;

        let witness_map: HashMap<B256, Bytes> =
            serde_json::from_str(real_witness).expect("should deserialize");
        println!("witness map: {witness_map:#?}");
        let state_root = b256!("233616dac5e708318380f37d962cbea36da209593a75726966bdc530a0cb0512");
        println!("===== WITH SIBLINGS =====");
        human_readable_witness(state_root, witness_map.clone(), true);
        println!("===== WITHOUT SIBLINGS =====");
        human_readable_witness(state_root, witness_map, false);
        panic!("example test done");
    }
}
